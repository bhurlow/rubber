(foo)
(require 'cljs)
(require 'cljs.core)
(require '[cljs.build :as build])
(require '[cljs.build.api :as build])
(require '[cljs.analyzer.api :as ana])
(doc ana/analyze-file)
(ana/analyze-file "src/rubber/core.cljs")
(ana/analyze-file "core.cljs")
(ana/analyze-file "src/rubber/core.cljs")
(ana/analyze-file "./src/rubber/core.cljs")
(slurp "core.cljs")
(slurp "src/rubber/core.cljs")
(ana/analyze-file "./src/rubber/core.cljs")
(doc ana/analyze)
(ana/analyze (println "wowo"))
(ana/analyze '(println "wowo"))
(def myenv '{:ns {:name cljs.user}})
(ana/analyze myenv '(println "wowo"))
(ana/analyze myenv (+ 100 100))
(ana/analyze myenv '(+ 100 100))
(use 'clojure.pprint)
(ana/analyze myenv '(+ 100 100))
*1
(pprint *1)
(require '[cljs.analyzer.api :as ana])
(require '[cljs.analyzer :as anac])
(anac/js-reserved)
anac/js-reserved
(require '[cljs.analyzer :as anac])
(require '[cljs.compiler :as comp])
(comp/emit "12312")
(-> '(+ 10000 30) (anac/analyze myenv) (comp/emit))
(-> '(+ 10000 30) (anac/analyze myenv) )
(anac/analyze myenv '(+ 100 100))
(comp/emit-str *1)
(anac/analyze myenv '(+ 100 100))
(anac/analyze myenv '(println "howdy "))
